= Guillotine - GraphQL Headless CMS for Enonic XP
:toc: macro
:toclevels: 3

== Introduction

Once assigned to your site, the guillotine application will generate a dynamic GraphQL API that enables web-based access to all 
your editorial content.

Guillotine exposes the read-only part of the Enonic Content API, including access to the Enonic query language. 
Guillotine dynamically analyzes all available content types in the site and generates a GraphQL API specific to your site. 
This gives you direct, typed and documented access to all content within the site. Including the ability to follow references, 
child items and access media directly.

toc::[]

== Compatibility

|===
|Version | XP Version | Download

|0.1.5
|>= 6.10.0
|http://repo.enonic.com/public/com/enonic/app/guillotine/0.1.5/guillotine-0.1.5.jar[Download]

|0.2.0
|>= 6.13.0
|http://repo.enonic.com/public/com/enonic/app/guillotine/0.2.0/guillotine-0.2.0.jar[Download]
|===

== GraphQL

GraphQL is query language developed by Facebook. 
This technology allows Guillotine to provide a single and exhaustive API 
while allowing you to retrieve all the content information you need in one request without any superfluous information

http://graphql.org/learn/[Learn more about GraphQL...]

== Installation

* Open the admin tool "Applications"
* Search for the "guillotine" application
* Click on "install"

image::doc/img/installation.png[Installation,768,384]

== Configuration

* Open the admin tool "Content Studio"
* Edit a site
* Add the application "Guillotine"

image::doc/img/configuration.png[Installation,768,576]



== Usage

Once a site is configured with the Guillotine application, a service "graphql" is present under the site path. 
Example: "http://localhost:8080/mysite/mypage/_/service/com.enonic.app.guillotine/graphql".

=== GraphiQL

The easiest way to manually explore a GraphQL API and test GraphQL queries is to use GraphiQL

==== Installation 

* Open the admin tool "Applications"
* Search for the "graphiql" application
* Click on "install"
* Open the admin tool "GraphiQL"

image::doc/img/graphiql.png[GraphiQL,768,384]

==== User Interface

* The field 'Service Location' specifies the location of the GraphQL service. 
+
By default, it is prefilled with one of your configured sites for the branch "draft".
* The left panel allows you to edit your graphQL query
* The center panel displays the result of the query execution
* The right panel is used to display a documentation generated from the GraphQL API.

==== Usage example

* Write the query below inside the left panel.
+
This query can be read as: Retrieve the display name and type of the current content.
* Click on the query execution button above
* The service response is displayed in the center panel

----
{
  content {
    get {
      displayName
      type
    }
  }
}
----

image::doc/img/graphiql-example.png[Example,768,384]

=== Application

To use the Guillotine API, your application will send all its request to the GraphQL service.
Example: "http://localhost:8080/mysite/mypage/_/service/com.enonic.app.guillotine/graphql".

The service is expecting to receive a POST request with inside its body:

* A mandatory "query" String
* An optional "variables" Object

image::doc/img/service.png[Request]


=== Relations

Multiple relations are generated to allow to navigate between contents.
By default, each content has the following relations:

* parent: Link to the parent content 
* children: Link to the child contents
* site: Link to the nearest site content

On top of that, every ContentSelector, MediaUploader, AttachmentUploader or ImageSelector defined in your content type definitions will 
be converted to a link to the related content(s).

==== Example: Children

Query example: Retrieve the display name of the current content and the display name of its direct children

----
{
  content {
    get {
      displayName
      children {
        displayName
      }
    }
  }
}
----

image::doc/img/children.png[Example,768,384]

==== Example: ContentSelector

Query example: Retrieve the Superhero blog posts. For each post, return its display name and the display name of the related author

----
{
  content{
    query(contentTypes:"com.enonic.app.superhero:post") {
      displayName
      ... on com_enonic_app_superhero_Post {
        data {          
          author {
            displayName
          }
        }
      }
    }
  }
}
----

image::doc/img/content-selector.png[Example,768,384]

=== Image

Enonic XP can edit images at runtime. Guillotine uses this functionality by generating, on every image, a field "imageUrl" generating a URL pointing to the processed image.

==== Example: Scaled Image URL

Query example: Retrieve the image contents and generate absolute URLs to these images cropped to 800x200px

----
{
  content {
    query(contentTypes:"media:image") {
      displayName
      ... on media_Image {
        imageUrl(scale:"block(800,200)",type:absolute)
      }
    }
  }
}
----

image::doc/img/example3.png[Example 3,768,384]

=== HTML

HTML fields are generated with a parameter "processHtml" allowing to replace abstract internal links by generated URLs. 

==== Example: Process HTML

Query example: Retrieve the Superhero blog posts. For each post, return its author display name, tags and processed content.

----
{
  content{
    query(contentTypes:"com.enonic.app.superhero:post") {
      ... on com_enonic_app_superhero_Post {
        data {
          author {
            displayName
          }
          tags
          post(processHtml:{type:absolute})
        }
      }
    }
  }
}
----

image::doc/img/process.png[Example 3,768,384]

== GraphQL API Documentation

This documentation lists and describes all static GraphQL types

=== Common arguments

|===
|Name | Remark | Default value

|key
|Designs a content path or content ID
|

|offset
|Designs a content path or content ID
|0

|first
|Number of content to fetch
|10

|sort
|Sorting expression
|"_score DESC"
|===

=== Object Types
==== Query 

===== Fields
|===
|Name(Arguments):Type | Description

|content: <<ContentAPI>>
|Type gathering all content retrieval requests
|===

==== ContentAPI 

Gathers all content retrieval requests. 

===== Remarks

* Most requests expect a key as argument. If the key is not specified, then the matched content will be the one corresponding to the current execution context

===== Fields

|===
|Name(Arguments):Type | Description

|get(key: ID): <<Content>>
|Fetches a content

|getChildren(
 key: ID,
 offset: Int,
 first: Int,
 sort: String
 ): [<<Content>>]
|Fetches the children of a content

|getChildrenConnection(
 key: ID,
 after: String,
 first: Int,
 sort: String
 ): <<ContentConnection>>
| Fetches the children of a content and return the result as a connection

|getPermissions(key: ID): <<Permissions>>
|Fetches the permissions on a content

|getSite: portal_Site
|Fetches the parent site of the content corresponding to the current execution context

|query(
 query: String,
 offset: Int,
 first: Int,
 sort: String,
 contentTypes: [String]
 ): [<<Content>>]
|Queries contents

|queryConnection(
 query: String!,
 after: String,
 first: Int,
 sort: String,
 contentTypes: [String]
 ): <<ContentConnection>>
|Queries contents and returns the result as a connection

|getType(name: String!): <<ContentType>>
|Retrieves the properties and icon of the specified content type

|getTypes: [<<ContentType>>]
|Retrieves the list of all content types available for the current site
|===

==== Content

Abstract type of all contents.

===== Fields
|===
|Name(Arguments):Type | Description

|_id: ID!
|Content ID

|_name: String!
|Content name

|_path: String!
|Content path

|creator: <<PrincipalKey>>
|Content creator

|modifier: <<PrincipalKey>>
|Last content modifier

|createdTime: String
|Content creation time

|modifiedTime: String
|Last content modification time

|owner: <<PrincipalKey>>
|Content owner

|type: String
|Content type

|displayName: String
|Content display name

|hasChildren: Boolean
|true if the content has children content

|language: String
|Content language

|valid: Boolean
|true if the content is valid

|x: [<<ExtraData>>]
|Content extra data

|page: <<Page>>
|Page specific information

|attachments: [<<Attachment>>]
|Content attachments

|publish: <<PublishInfo>>
|Publication information

|pageUrl(type: <<UrlTypeType>>, params: String): String
|Util field to generate a URL pointing to the content

|site: portal_Site
|Link to the nearest site

|parent: <<Content>>
|Link to the content parent

|children(
offset: Int, 
first: Int, 
sort: String
): [<<Content>>]
|Link to the direct child contents

|childrenConnection(
after: String, 
first: Int, 
sort: String
): <<ContentConnection>>
|Connection to the direct child contents

|permissions: <<Permissions>>
|Content permissions
|===

===== Direct Known Subtypes

Direct Known Subtypes: 
portal_Site
, base_Folder
, media_Code
, media_Executable
, media_Text
, media_Vector
, media_Spreadsheet
, media_Data
, base_Structured
, base_Shortcut
, base_Media
, media_Document
, media_Video
, media_Presentation
, media_Archive
, media_Audio
, portal_PageTemplate
, media_Unknown
, portal_TemplateFolder
, media_Image
, base_Unstructured
, portal_Fragment

==== ContentConnection

To ease the pagination of relationship to a content, the type ContentConnection has been created to represent this connection.
It allows you to :

* Paginate through the list of contents.
* Ask for information about the connection itself, like totalCount or pageInfo.
* Ask for information about the edge itself, like cursor.

===== Fields

|===
|Name(Arguments):Type | Description

|totalCount: Int!
|Total number of related content

|edges: [<<ContentEdge>>]
|Edge to the related content

|pageInfo: <<PageInfo>>
|Paging information

|===

==== ContentEdge

===== Fields

|===
|Name(Arguments):Type | Description

|node: <<Content>>!
|Related content

|cursor: String!
|Edge cursor

|===

==== PageInfo

===== Fields

|===
|Name(Arguments):Type | Description

|startCursor: String!
|Start cursor of the pagination

|endCursor: String!
|End cursor of the pagination

|hasNext: Boolean!
|Has more related contents at end cursor

|===

==== Permissions

===== Fields

|===
|Name(Arguments):Type | Description

|inheritsPermissions: Boolean
|Inherit permissions from parent content

|permissions: [<<AccessControlEntry>>]
|Permissions

|===

==== AccessControlEntry

===== Fields

|===
|Name(Arguments):Type | Description

|principal: <<PrincipalKey>>
|Principal key

|allow: [<<Permission>>]
|Allowed permissions

|deny: [<<Permission>>]
|Denied permissions

|===

==== PrincipalKey

===== Fields

|===
|Name(Arguments):Type | Description

|value: String
|Principal key value

|type: <<PrincipalType>>
|Principal type

|userStore: String
|User store name

|principalId: String
|Principal ID inside this user store

|===

==== ContentType

Representation of a content type definition

===== Fields

|===
|Name(Arguments):Type | Description

|name: String
|Content type name

|displayName: String
|Content type display name

|description: String
|Content type description

|superType: String
|Parent content type

|abstract: Boolean
|true if the content type is abstract

|final: Boolean
|true if the content type cannot be used as super type

|allowChildContent: Boolean
|true if content can be added under a content of this type

|contentDisplayNameScript: String
|

|icon: Icon
|

|form: [<<FormItem>>]
|Content type fields schema

|getInstances(
offset: Int
, first: Int
, query: String
, sort: String
): [<<Content>>]
|Util field returning the contents of this type

|getInstanceConnection(
after: String
, first: Int
, query: String
, sort: String
): <<ContentConnection>>
|Util field returning the contents of this type as a connection

|===

==== FormItem

===== Fields

|===
|Name(Arguments):Type | Description

|formItemType: <<FormItemType>>
|Form item type

|name: String
|Form item name

|label: String
|Form item label

|===

===== Direct Known Subtypes

Direct Known Subtypes: FormInput
, FormOptionSet
, FormLayout
, FormItemSet

==== ExtraData

===== Fields

|===
|Name(Arguments):Type | Description

|name: String
|Mixin name

|data: String
|Mixin value

|===

==== Page

Page specific properties

===== Fields

|===
|Name(Arguments):Type | Description

|template: String
|Page template

|controller: String
|Page controller

|config: String
|Page configuration

|regions: [<<Region>>]
|Page regions

|fragment: <<Component>>
|Fragment

|===

==== Region

===== Fields

|===
|Name(Arguments):Type | Description

|name: String
|Region name

|components: [<<Component>>]
|Region components

|===

==== Component

===== Fields

|===
|Name(Arguments):Type | Description

|name: String
|Component name

|path: String
|Component path

|type: String
|Component type

|descriptor: String
|Component descriptor

|text: String
|Component text

|fragment: String
|Fragment

|config: String
|Component configuration

|regions: [<<Region>>]
|Component regions

|===

==== Attachment

===== Fields

|===
|Name(Arguments):Type | Description

|name: String
|Attachment name

|label: String
|Attachment label

|size: Int
|Attachment size

|mimeType: String
|Attachment mime type

|===

==== PublishInfo

===== Fields

|===
|Name(Arguments):Type | Description

|from: String
|Scheduled publication start time

|to: String
|Scheduled publication end time

|first: String
|First publication time

|===

==== Icon

===== Fields

|===
|Name(Arguments):Type | Description

|mimeType: String
|Icon mime type

|modifiedTime: String
|Icon last modification time

|===

=== Enum Types

==== PrincipalType

Enum values: user
, group
, role

==== Permission

Enum values: READ
, CREATE
, MODIFY
, DELETE
, PUBLISH
, READ_PERMISSIONS
, WRITE_PERMISSIONS

==== FormItemType

Enum values: ItemSet
, Layout
, Input
, OptionSet

==== UrlTypeType

Enum values: server
, absolute

